/**
 * Centralized Error Code Registry
 *
 * Single source of truth for all error codes in the application.
 * Consolidates codes from:
 * - AppError (app-error.ts)
 * - APIClientError (api-client.errors.ts)
 * - UnifiedError (unified-errors.ts)
 */

/**
 * Error code categories for organization
 */
export const ERROR_CODE_CATEGORIES = {
  // Authentication & Authorization
  AUTH: 'AUTH',

  // API Client Operations
  API: 'API',

  // Service Operations
  SERVICE: 'SERVICE',

  // Workflow Operations
  WORKFLOW: 'WORKFLOW',

  // Domain Operations
  DOMAIN: 'DOMAIN',

  // External API Integrations
  EXTERNAL: 'EXTERNAL',

  // Validation
  VALIDATION: 'VALIDATION',

  // Network & Connectivity
  NETWORK: 'NETWORK',

  // Rate Limiting
  RATE_LIMIT: 'RATE_LIMIT',

  // Business Logic
  BUSINESS: 'BUSINESS',

  // Configuration
  CONFIG: 'CONFIG',
} as const;

/**
 * Comprehensive error codes registry
 */
export const ERROR_CODES = {
  // ========================================
  // AUTHENTICATION & AUTHORIZATION
  // ========================================
  AUTH_REQUIRED: 'AUTH_REQUIRED',
  AUTH_FAILED: 'AUTH_FAILED',
  AUTH_EXPIRED: 'AUTH_EXPIRED',
  AUTH_INVALID_CREDENTIALS: 'AUTH_INVALID_CREDENTIALS',
  AUTHENTICATION_FAILED: 'AUTHENTICATION_FAILED',
  TOKEN_EXPIRED: 'TOKEN_EXPIRED',
  TOKEN_INVALID: 'TOKEN_INVALID',
  TOKEN_UNAVAILABLE: 'TOKEN_UNAVAILABLE',
  TOKEN_AUTHENTICATION_FAILED: 'TOKEN_AUTHENTICATION_FAILED',
  AUTHORIZATION_DENIED: 'AUTHORIZATION_DENIED',
  INSUFFICIENT_PERMISSIONS: 'INSUFFICIENT_PERMISSIONS',

  // ========================================
  // API CLIENT ERRORS
  // ========================================
  UNAUTHORIZED: 'UNAUTHORIZED',
  FORBIDDEN: 'FORBIDDEN',
  NOT_FOUND: 'NOT_FOUND',
  CONFLICT: 'CONFLICT',
  BAD_REQUEST: 'BAD_REQUEST',
  NOT_AUTHENTICATED: 'NOT_AUTHENTICATED',

  // ========================================
  // NETWORK & CONNECTIVITY
  // ========================================
  NETWORK_ERROR: 'NETWORK_ERROR',
  NETWORK_TIMEOUT: 'NETWORK_TIMEOUT',
  NETWORK_CONNECTION_FAILED: 'NETWORK_CONNECTION_FAILED',
  TIMEOUT: 'TIMEOUT',

  // ========================================
  // RATE LIMITING
  // ========================================
  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
  RATE_LIMIT_QUOTA_EXCEEDED: 'RATE_LIMIT_QUOTA_EXCEEDED',
  RATE_LIMITED: 'RATE_LIMITED',

  // ========================================
  // SERVER ERRORS
  // ========================================
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
  GATEWAY_TIMEOUT: 'GATEWAY_TIMEOUT',
  SERVICE_ERROR: 'SERVICE_ERROR',
  SERVICE_TIMEOUT: 'SERVICE_TIMEOUT',
  SERVICE_INITIALIZATION_FAILED: 'SERVICE_INITIALIZATION_FAILED',

  // ========================================
  // CIRCUIT BREAKER
  // ========================================
  CIRCUIT_BREAKER_OPEN: 'CIRCUIT_BREAKER_OPEN',

  // ========================================
  // CONFIGURATION
  // ========================================
  CONFIG_ERROR: 'CONFIG_ERROR',
  CONFIGURATION_ERROR: 'CONFIGURATION_ERROR',
  CLIENT_NOT_REGISTERED: 'CLIENT_NOT_REGISTERED',
  CLIENT_NOT_INITIALIZED: 'CLIENT_NOT_INITIALIZED',

  // ========================================
  // VALIDATION
  // ========================================
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  VALIDATION_FAILED: 'VALIDATION_FAILED',
  INVALID_INPUT: 'INVALID_INPUT',

  // ========================================
  // WORKFLOW ERRORS
  // ========================================
  WORKFLOW_EXECUTION_FAILED: 'WORKFLOW_EXECUTION_FAILED',
  WORKFLOW_ITERATION_LIMIT: 'WORKFLOW_ITERATION_LIMIT',
  WORKFLOW_ITERATION_LIMIT_EXCEEDED: 'WORKFLOW_ITERATION_LIMIT_EXCEEDED',
  WORKFLOW_INTERRUPTED: 'WORKFLOW_INTERRUPTED',
  WORKFLOW_STATE_INVALID: 'WORKFLOW_STATE_INVALID',

  // ========================================
  // BUILDER & PROMPT ERRORS
  // ========================================
  BUILDER_NOT_INITIALIZED: 'BUILDER_NOT_INITIALIZED',
  BUILDER_EXECUTION_FAILED: 'BUILDER_EXECUTION_FAILED',

  // ========================================
  // CONTEXT ERRORS
  // ========================================
  CONTEXT_INVALID: 'CONTEXT_INVALID',
  CONTEXT_PARSING_FAILED: 'CONTEXT_PARSING_FAILED',
  CONTEXT_UPDATE_FAILED: 'CONTEXT_UPDATE_FAILED',

  // ========================================
  // AGENT ERRORS
  // ========================================
  AGENT_EXECUTION_FAILED: 'AGENT_EXECUTION_FAILED',
  AGENT_NOT_AVAILABLE: 'AGENT_NOT_AVAILABLE',
  AGENT_RESPONSE_INVALID: 'AGENT_RESPONSE_INVALID',

  // ========================================
  // USER INPUT
  // ========================================
  USER_INPUT_REQUIRED: 'USER_INPUT_REQUIRED',
  USER_INPUT_TIMEOUT: 'USER_INPUT_TIMEOUT',
  USER_INPUT_INVALID: 'USER_INPUT_INVALID',

  // ========================================
  // BUSINESS LOGIC
  // ========================================
  BUSINESS_RULE_VIOLATION: 'BUSINESS_RULE_VIOLATION',

  // ========================================
  // EXTERNAL API SPECIFIC
  // ========================================
  // Google API
  GOOGLE_API_ERROR: 'GOOGLE_API_ERROR',
  GOOGLE_AUTH_FAILED: 'GOOGLE_AUTH_FAILED',
  GOOGLE_PERMISSION_DENIED: 'GOOGLE_PERMISSION_DENIED',
  GOOGLE_NOT_FOUND: 'GOOGLE_NOT_FOUND',
  GOOGLE_RATE_LIMIT: 'GOOGLE_RATE_LIMIT',
  GOOGLE_SERVER_ERROR: 'GOOGLE_SERVER_ERROR',

  // OpenAI API
  OPENAI_API_ERROR: 'OPENAI_API_ERROR',
  OPENAI_AUTH_FAILED: 'OPENAI_AUTH_FAILED',
  OPENAI_RATE_LIMIT: 'OPENAI_RATE_LIMIT',
  OPENAI_TIMEOUT: 'OPENAI_TIMEOUT',
  OPENAI_SERVER_ERROR: 'OPENAI_SERVER_ERROR',
  OPENAI_INVALID_REQUEST: 'OPENAI_INVALID_REQUEST',

  // ========================================
  // EXTERNAL SERVICE ERRORS
  // ========================================
  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',

  // ========================================
  // GENERIC
  // ========================================
  UNKNOWN_ERROR: 'UNKNOWN_ERROR',
  OPERATION_FAILED: 'OPERATION_FAILED',
  WRAPPED_ERROR: 'WRAPPED_ERROR',
} as const;

/**
 * Type for error codes
 */
export type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];

/**
 * Type for error code categories
 */
export type ErrorCodeCategory = typeof ERROR_CODE_CATEGORIES[keyof typeof ERROR_CODE_CATEGORIES];

/**
 * Map error codes to their categories
 */
export const ERROR_CODE_TO_CATEGORY: Record<string, ErrorCodeCategory> = {
  // Auth
  [ERROR_CODES.AUTH_REQUIRED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.AUTH_FAILED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.AUTH_EXPIRED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.AUTH_INVALID_CREDENTIALS]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.AUTHENTICATION_FAILED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.TOKEN_EXPIRED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.TOKEN_INVALID]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.TOKEN_UNAVAILABLE]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.TOKEN_AUTHENTICATION_FAILED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.AUTHORIZATION_DENIED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.INSUFFICIENT_PERMISSIONS]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.UNAUTHORIZED]: ERROR_CODE_CATEGORIES.AUTH,
  [ERROR_CODES.FORBIDDEN]: ERROR_CODE_CATEGORIES.AUTH,

  // API Client
  [ERROR_CODES.NOT_FOUND]: ERROR_CODE_CATEGORIES.API,
  [ERROR_CODES.CONFLICT]: ERROR_CODE_CATEGORIES.API,
  [ERROR_CODES.BAD_REQUEST]: ERROR_CODE_CATEGORIES.API,
  [ERROR_CODES.NOT_AUTHENTICATED]: ERROR_CODE_CATEGORIES.API,

  // Network
  [ERROR_CODES.NETWORK_ERROR]: ERROR_CODE_CATEGORIES.NETWORK,
  [ERROR_CODES.NETWORK_TIMEOUT]: ERROR_CODE_CATEGORIES.NETWORK,
  [ERROR_CODES.NETWORK_CONNECTION_FAILED]: ERROR_CODE_CATEGORIES.NETWORK,
  [ERROR_CODES.TIMEOUT]: ERROR_CODE_CATEGORIES.NETWORK,

  // Rate Limit
  [ERROR_CODES.RATE_LIMIT_EXCEEDED]: ERROR_CODE_CATEGORIES.RATE_LIMIT,
  [ERROR_CODES.RATE_LIMIT_QUOTA_EXCEEDED]: ERROR_CODE_CATEGORIES.RATE_LIMIT,
  [ERROR_CODES.RATE_LIMITED]: ERROR_CODE_CATEGORIES.RATE_LIMIT,

  // Service
  [ERROR_CODES.INTERNAL_SERVER_ERROR]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.SERVICE_UNAVAILABLE]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.GATEWAY_TIMEOUT]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.SERVICE_ERROR]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.SERVICE_TIMEOUT]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.SERVICE_INITIALIZATION_FAILED]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.CIRCUIT_BREAKER_OPEN]: ERROR_CODE_CATEGORIES.SERVICE,

  // Config
  [ERROR_CODES.CONFIG_ERROR]: ERROR_CODE_CATEGORIES.CONFIG,
  [ERROR_CODES.CONFIGURATION_ERROR]: ERROR_CODE_CATEGORIES.CONFIG,
  [ERROR_CODES.CLIENT_NOT_REGISTERED]: ERROR_CODE_CATEGORIES.CONFIG,
  [ERROR_CODES.CLIENT_NOT_INITIALIZED]: ERROR_CODE_CATEGORIES.CONFIG,

  // Validation
  [ERROR_CODES.VALIDATION_ERROR]: ERROR_CODE_CATEGORIES.VALIDATION,
  [ERROR_CODES.VALIDATION_FAILED]: ERROR_CODE_CATEGORIES.VALIDATION,
  [ERROR_CODES.INVALID_INPUT]: ERROR_CODE_CATEGORIES.VALIDATION,

  // Workflow
  [ERROR_CODES.WORKFLOW_EXECUTION_FAILED]: ERROR_CODE_CATEGORIES.WORKFLOW,
  [ERROR_CODES.WORKFLOW_ITERATION_LIMIT]: ERROR_CODE_CATEGORIES.WORKFLOW,
  [ERROR_CODES.WORKFLOW_ITERATION_LIMIT_EXCEEDED]: ERROR_CODE_CATEGORIES.WORKFLOW,
  [ERROR_CODES.WORKFLOW_INTERRUPTED]: ERROR_CODE_CATEGORIES.WORKFLOW,
  [ERROR_CODES.WORKFLOW_STATE_INVALID]: ERROR_CODE_CATEGORIES.WORKFLOW,

  // Builder
  [ERROR_CODES.BUILDER_NOT_INITIALIZED]: ERROR_CODE_CATEGORIES.DOMAIN,
  [ERROR_CODES.BUILDER_EXECUTION_FAILED]: ERROR_CODE_CATEGORIES.DOMAIN,

  // Context
  [ERROR_CODES.CONTEXT_INVALID]: ERROR_CODE_CATEGORIES.DOMAIN,
  [ERROR_CODES.CONTEXT_PARSING_FAILED]: ERROR_CODE_CATEGORIES.DOMAIN,
  [ERROR_CODES.CONTEXT_UPDATE_FAILED]: ERROR_CODE_CATEGORIES.DOMAIN,

  // Agent
  [ERROR_CODES.AGENT_EXECUTION_FAILED]: ERROR_CODE_CATEGORIES.DOMAIN,
  [ERROR_CODES.AGENT_NOT_AVAILABLE]: ERROR_CODE_CATEGORIES.DOMAIN,
  [ERROR_CODES.AGENT_RESPONSE_INVALID]: ERROR_CODE_CATEGORIES.DOMAIN,

  // User Input
  [ERROR_CODES.USER_INPUT_REQUIRED]: ERROR_CODE_CATEGORIES.BUSINESS,
  [ERROR_CODES.USER_INPUT_TIMEOUT]: ERROR_CODE_CATEGORIES.BUSINESS,
  [ERROR_CODES.USER_INPUT_INVALID]: ERROR_CODE_CATEGORIES.BUSINESS,
  [ERROR_CODES.BUSINESS_RULE_VIOLATION]: ERROR_CODE_CATEGORIES.BUSINESS,

  // External APIs
  [ERROR_CODES.GOOGLE_API_ERROR]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.GOOGLE_AUTH_FAILED]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.GOOGLE_PERMISSION_DENIED]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.GOOGLE_NOT_FOUND]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.GOOGLE_RATE_LIMIT]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.GOOGLE_SERVER_ERROR]: ERROR_CODE_CATEGORIES.EXTERNAL,

  [ERROR_CODES.OPENAI_API_ERROR]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.OPENAI_AUTH_FAILED]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.OPENAI_RATE_LIMIT]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.OPENAI_TIMEOUT]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.OPENAI_SERVER_ERROR]: ERROR_CODE_CATEGORIES.EXTERNAL,
  [ERROR_CODES.OPENAI_INVALID_REQUEST]: ERROR_CODE_CATEGORIES.EXTERNAL,

  [ERROR_CODES.EXTERNAL_SERVICE_ERROR]: ERROR_CODE_CATEGORIES.EXTERNAL,

  // Generic
  [ERROR_CODES.UNKNOWN_ERROR]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.OPERATION_FAILED]: ERROR_CODE_CATEGORIES.SERVICE,
  [ERROR_CODES.WRAPPED_ERROR]: ERROR_CODE_CATEGORIES.SERVICE,
};

/**
 * Helper to get category for an error code
 */
export function getErrorCategory(code: string): ErrorCodeCategory {
  return ERROR_CODE_TO_CATEGORY[code] || ERROR_CODE_CATEGORIES.SERVICE;
}

/**
 * Helper to check if error code exists
 */
export function isValidErrorCode(code: string): code is ErrorCode {
  return Object.values(ERROR_CODES).includes(code as ErrorCode);
}
