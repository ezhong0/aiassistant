#!/bin/bash

# Phase 1: Simple Setup Script
# Automates initial project setup with secure defaults

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    log_error "Please run this script from the backend directory"
    exit 1
fi

log_info "🚀 Starting Assistant App Setup..."

# Step 1: Install dependencies
log_info "📦 Installing dependencies..."
if [ -f "package-lock.json" ]; then
    npm ci
else
    npm install
fi
log_success "Dependencies installed"

# Step 2: Generate JWT Secret
log_info "🔐 Generating secure JWT secret..."
JWT_SECRET=$(openssl rand -base64 64 | tr -d "=+/" | cut -c1-64)
log_success "JWT secret generated"

# Step 3: Create .env file
log_info "📝 Creating environment configuration..."
if [ -f ".env" ]; then
    log_warning ".env file already exists. Backing up to .env.backup"
    cp .env .env.backup
fi

cat > .env << EOF
# Assistant App Environment Configuration
# Generated by setup script on $(date)

# Core Application
NODE_ENV=development
PORT=3000
LOG_LEVEL=info
BASE_URL=http://localhost:3000

# Security
JWT_SECRET=${JWT_SECRET}

# Google OAuth (Required for production)
# Get these from: https://console.developers.google.com/
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/callback

# OpenAI API (Required for AI features)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=

# Tavily API (Optional - for web search)
# Get from: https://tavily.com/
TAVILY_API_KEY=

# Slack Integration (Optional)
# Get from: https://api.slack.com/apps
SLACK_SIGNING_SECRET=
SLACK_BOT_TOKEN=
SLACK_CLIENT_ID=
SLACK_CLIENT_SECRET=
SLACK_OAUTH_REDIRECT_URI=http://localhost:3000/auth/slack/callback

# Feature Flags
ENABLE_OPENAI=true
ENABLE_RATE_LIMITING=true
ENABLE_REQUEST_LOGGING=true
DISABLE_RATE_LIMITING=false

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Redis (Optional - for caching)
# Railway will provide this automatically
REDIS_URL=
EOF

log_success "Environment file created"

# Step 4: Create setup instructions
log_info "📋 Creating setup instructions..."
cat > SETUP_INSTRUCTIONS.md << 'EOF'
# 🚀 Assistant App Setup Instructions

## Quick Start (2 minutes)

1. **Fill in your API keys** in `.env`:
   ```bash
   # Edit the .env file with your API keys
   nano .env
   ```

2. **Start the application**:
   ```bash
   npm run dev
   ```

3. **Test the setup**:
   ```bash
   curl http://localhost:3000/health
   ```

## Required API Keys

### 1. OpenAI API Key (Required)
- Go to: https://platform.openai.com/api-keys
- Create a new API key
- Add to `.env`: `OPENAI_API_KEY=sk-...`

### 2. Google OAuth (Required for production)
- Go to: https://console.developers.google.com/
- Create a new project or select existing
- Enable Gmail API and Google Calendar API
- Create OAuth 2.0 credentials
- Add to `.env`:
  ```
  GOOGLE_CLIENT_ID=your_client_id
  GOOGLE_CLIENT_SECRET=your_client_secret
  ```

### 3. Slack Integration (Optional)
- Go to: https://api.slack.com/apps
- Create a new app
- Add bot token scopes: `chat:write`, `channels:read`, `users:read`
- Add to `.env`:
  ```
  SLACK_BOT_TOKEN=xoxb-...
  SLACK_SIGNING_SECRET=...
  SLACK_CLIENT_ID=...
  SLACK_CLIENT_SECRET=...
  ```

## Verification

Run the health check to verify everything works:
```bash
curl http://localhost:3000/health
```

Expected response:
```json
{
  "status": "healthy",
  "timestamp": "2024-01-01T00:00:00.000Z",
  "services": {
    "database": "healthy",
    "cache": "healthy",
    "openai": "configured"
  }
}
```

## Next Steps

1. **Test email functionality**: Try sending a test email
2. **Test calendar integration**: Try creating a calendar event
3. **Deploy to Railway**: Run `railway up` when ready

## Troubleshooting

- **Port 3000 in use**: Change `PORT=3001` in `.env`
- **Database errors**: The app works without a database in development
- **API key errors**: Check your API keys are valid and have proper permissions
EOF

log_success "Setup instructions created"

# Step 5: Run health check
log_info "🏥 Running health check..."
if npm run build > /dev/null 2>&1; then
    log_success "Build successful"
else
    log_warning "Build failed - this is normal if API keys are missing"
fi

# Step 6: Display next steps
echo ""
log_success "🎉 Setup complete!"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Edit .env file with your API keys:"
echo "   ${BLUE}nano .env${NC}"
echo ""
echo "2. Start the application:"
echo "   ${BLUE}npm run dev${NC}"
echo ""
echo "3. Test the setup:"
echo "   ${BLUE}curl http://localhost:3000/health${NC}"
echo ""
echo -e "${YELLOW}Setup instructions saved to:${NC} SETUP_INSTRUCTIONS.md"
echo ""
log_info "Setup completed in $(date)"
